/**
 * CoTax 신고서 자동생성 시스템
 * 법인세 신고서 양식 생성 및 PDF 출력
 */

/**
 * 신고서 양식 템플릿
 */
const TAX_RETURN_TEMPLATES = {
    // 법인세 과세표준 및 세액 신고서
    corporateTaxReturn: {
        title: '법인세 과세표준 및 세액 신고서',
        sections: [
            'company_info',      // 법인 기본정보
            'business_period',   // 사업연도
            'income_calculation', // 소득금액 계산
            'tax_calculation',   // 세액 계산
            'tax_adjustments',   // 세무조정
            'payment_info'       // 납부정보
        ]
    },
    
    // 지방소득세 신고서
    localIncomeTaxReturn: {
        title: '지방소득세 과세표준 및 세액 신고서',
        sections: [
            'company_info',
            'business_period',
            'local_tax_calculation',
            'payment_info'
        ]
    }
};

/**
 * 신고서 생성기 클래스
 */
class TaxReturnGenerator {
    constructor() {
        this.taxReturnData = null;
        this.templates = TAX_RETURN_TEMPLATES;
    }
    
    /**
     * 신고서 데이터 설정
     */
    setTaxReturnData(taxReturnData) {
        this.taxReturnData = taxReturnData;
        return this;
    }
    
    /**
     * HTML 신고서 생성
     */
    generateHTMLReturn(templateType = 'corporateTaxReturn') {
        if (!this.taxReturnData) {
            throw new Error('신고서 데이터가 설정되지 않았습니다.');
        }
        
        const template = this.templates[templateType];
        if (!template) {
            throw new Error('지원하지 않는 신고서 양식입니다.');
        }
        
        let html = this.generateHTMLHeader(template.title);
        
        // 각 섹션별 HTML 생성
        for (const section of template.sections) {
            html += this.generateSection(section);
        }
        
        html += this.generateHTMLFooter();
        
        return html;
    }
    
    /**
     * HTML 헤더 생성
     */
    generateHTMLHeader(title) {
        return `
        <!DOCTYPE html>
        <html lang="ko">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${title}</title>
            <style>
                ${this.getTaxReturnCSS()}
            </style>
        </head>
        <body>
            <div class="tax-return-container">
                <div class="header">
                    <div class="header-left">
                        <h1>${title}</h1>
                        <div class="report-info">
                            <p>신고서 유형: 정기신고</p>
                            <p>작성일: ${new Date().toLocaleDateString('ko-KR')}</p>
                        </div>
                    </div>
                    <div class="header-right">
                        <div class="company-seal">
                            <div class="seal-box">
                                <p>법인인감</p>
                                <div class="seal-area">(인)</div>
                            </div>
                        </div>
                    </div>
                </div>
        `;
    }
    
    /**
     * HTML 푸터 생성
     */
    generateHTMLFooter() {
        return `
                <div class="footer">
                    <div class="signature-area">
                        <p>위와 같이 신고합니다.</p>
                        <div class="signature-date">
                            <span>${new Date().getFullYear()}년 ${new Date().getMonth() + 1}월 ${new Date().getDate()}일</span>
                        </div>
                        <div class="signature-info">
                            <p>신고인: ${this.taxReturnData.declaration.company_name}</p>
                            <p>대표자: (서명 또는 인)</p>
                        </div>
                    </div>
                    <div class="system-info">
                        <p>Generated by CoTax System v1.0 - ${this.taxReturnData.generated_at}</p>
                    </div>
                </div>
            </div>
        </body>
        </html>
        `;
    }
    
    /**
     * 섹션별 HTML 생성
     */
    generateSection(sectionType) {
        switch (sectionType) {
            case 'company_info':
                return this.generateCompanyInfoSection();
            case 'business_period':
                return this.generateBusinessPeriodSection();
            case 'income_calculation':
                return this.generateIncomeCalculationSection();
            case 'tax_calculation':
                return this.generateTaxCalculationSection();
            case 'tax_adjustments':
                return this.generateTaxAdjustmentsSection();
            case 'payment_info':
                return this.generatePaymentInfoSection();
            case 'local_tax_calculation':
                return this.generateLocalTaxCalculationSection();
            default:
                return '';
        }
    }
    
    /**
     * 법인 기본정보 섹션
     */
    generateCompanyInfoSection() {
        const { declaration } = this.taxReturnData;
        
        return `
        <section class="company-info">
            <h2>1. 법인 기본정보</h2>
            <table class="info-table">
                <tr>
                    <td class="label">법인명</td>
                    <td class="value">${declaration.company_name}</td>
                    <td class="label">법인등록번호</td>
                    <td class="value">${declaration.company_reg_no}</td>
                </tr>
                <tr>
                    <td class="label">종류별구분코드</td>
                    <td class="value">${declaration.tax_classification}</td>
                    <td class="label">법인유형별구분코드</td>
                    <td class="value">${declaration.corporation_type_code || '-'}</td>
                </tr>
                <tr>
                    <td class="label">사업연도</td>
                    <td class="value">${declaration.business_year}</td>
                    <td class="label">신고일</td>
                    <td class="value">${this.formatDate(declaration.report_date)}</td>
                </tr>
            </table>
        </section>
        `;
    }
    
    /**
     * 사업연도 섹션
     */
    generateBusinessPeriodSection() {
        const { declaration } = this.taxReturnData;
        
        return `
        <section class="business-period">
            <h2>2. 사업연도</h2>
            <table class="info-table">
                <tr>
                    <td class="label">사업연도</td>
                    <td class="value">${declaration.business_year}년</td>
                    <td class="label">신고구분</td>
                    <td class="value">정기신고</td>
                </tr>
            </table>
        </section>
        `;
    }
    
    /**
     * 소득금액 계산 섹션
     */
    generateIncomeCalculationSection() {
        const { income } = this.taxReturnData;
        
        return `
        <section class="income-calculation">
            <h2>3. 소득금액 계산</h2>
            <table class="calculation-table">
                <thead>
                    <tr>
                        <th>구분</th>
                        <th>금액(원)</th>
                        <th>비고</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>회계상 소득금액</td>
                        <td class="amount">${this.formatAmount(income.book_income)}</td>
                        <td>당기순이익 기준</td>
                    </tr>
                    <tr>
                        <td>손금불산입</td>
                        <td class="amount">${this.formatAmount(income.non_deductible_total)}</td>
                        <td>세무조정 가산</td>
                    </tr>
                    <tr>
                        <td>익금불산입</td>
                        <td class="amount">(${this.formatAmount(income.non_taxable_total)})</td>
                        <td>세무조정 차감</td>
                    </tr>
                    <tr class="total-row">
                        <td><strong>과세표준</strong></td>
                        <td class="amount"><strong>${this.formatAmount(income.taxable_income)}</strong></td>
                        <td>최종 과세소득</td>
                    </tr>
                </tbody>
            </table>
        </section>
        `;
    }
    
    /**
     * 세액 계산 섹션
     */
    generateTaxCalculationSection() {
        const { tax, income } = this.taxReturnData;
        
        return `
        <section class="tax-calculation">
            <h2>4. 세액 계산</h2>
            <table class="calculation-table">
                <thead>
                    <tr>
                        <th>구분</th>
                        <th>과세표준(원)</th>
                        <th>세율</th>
                        <th>세액(원)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>법인세</td>
                        <td class="amount">${this.formatAmount(income.taxable_income)}</td>
                        <td>누진세율</td>
                        <td class="amount">${this.formatAmount(tax.corporate_tax)}</td>
                    </tr>
                    <tr>
                        <td>지방소득세</td>
                        <td class="amount">${this.formatAmount(tax.corporate_tax)}</td>
                        <td>10%</td>
                        <td class="amount">${this.formatAmount(tax.local_income_tax)}</td>
                    </tr>
                    <tr class="total-row">
                        <td><strong>합계</strong></td>
                        <td></td>
                        <td><strong>실효세율 ${tax.effective_rate}%</strong></td>
                        <td class="amount"><strong>${this.formatAmount(tax.total_tax)}</strong></td>
                    </tr>
                </tbody>
            </table>
        </section>
        `;
    }
    
    /**
     * 세무조정 섹션
     */
    generateTaxAdjustmentsSection() {
        const { adjustments } = this.taxReturnData;
        
        if (!adjustments || adjustments.length === 0) {
            return `
            <section class="tax-adjustments">
                <h2>5. 세무조정 내역</h2>
                <p class="no-data">세무조정 내역이 없습니다.</p>
            </section>
            `;
        }
        
        const nonDeductibleItems = adjustments.filter(adj => adj.type === 'nonDeductible');
        const nonTaxableItems = adjustments.filter(adj => adj.type === 'nonTaxable');
        
        return `
        <section class="tax-adjustments">
            <h2>5. 세무조정 내역</h2>
            
            ${nonDeductibleItems.length > 0 ? `
            <h3>5-1. 손금불산입</h3>
            <table class="adjustment-table">
                <thead>
                    <tr>
                        <th>코드</th>
                        <th>항목명</th>
                        <th>금액(원)</th>
                        <th>비고</th>
                    </tr>
                </thead>
                <tbody>
                    ${nonDeductibleItems.map(item => `
                    <tr>
                        <td>${item.code}</td>
                        <td>${item.name}</td>
                        <td class="amount">${this.formatAmount(item.amount)}</td>
                        <td>${item.description || '-'}</td>
                    </tr>
                    `).join('')}
                    <tr class="subtotal-row">
                        <td colspan="2"><strong>손금불산입 합계</strong></td>
                        <td class="amount"><strong>${this.formatAmount(nonDeductibleItems.reduce((sum, item) => sum + item.amount, 0))}</strong></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
            ` : ''}
            
            ${nonTaxableItems.length > 0 ? `
            <h3>5-2. 익금불산입</h3>
            <table class="adjustment-table">
                <thead>
                    <tr>
                        <th>코드</th>
                        <th>항목명</th>
                        <th>금액(원)</th>
                        <th>비고</th>
                    </tr>
                </thead>
                <tbody>
                    ${nonTaxableItems.map(item => `
                    <tr>
                        <td>${item.code}</td>
                        <td>${item.name}</td>
                        <td class="amount">${this.formatAmount(item.amount)}</td>
                        <td>${item.description || '-'}</td>
                    </tr>
                    `).join('')}
                    <tr class="subtotal-row">
                        <td colspan="2"><strong>익금불산입 합계</strong></td>
                        <td class="amount"><strong>${this.formatAmount(nonTaxableItems.reduce((sum, item) => sum + item.amount, 0))}</strong></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
            ` : ''}
        </section>
        `;
    }
    
    /**
     * 납부정보 섹션
     */
    generatePaymentInfoSection() {
        const { tax } = this.taxReturnData;
        
        return `
        <section class="payment-info">
            <h2>6. 납부정보</h2>
            <table class="payment-table">
                <thead>
                    <tr>
                        <th>세목</th>
                        <th>납부세액(원)</th>
                        <th>납부기한</th>
                        <th>납부방법</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>법인세</td>
                        <td class="amount">${this.formatAmount(tax.corporate_tax)}</td>
                        <td>${this.getPaymentDeadline()}</td>
                        <td>전자납부</td>
                    </tr>
                    <tr>
                        <td>지방소득세</td>
                        <td class="amount">${this.formatAmount(tax.local_income_tax)}</td>
                        <td>${this.getPaymentDeadline()}</td>
                        <td>전자납부</td>
                    </tr>
                    <tr class="total-row">
                        <td><strong>합계</strong></td>
                        <td class="amount"><strong>${this.formatAmount(tax.total_tax)}</strong></td>
                        <td colspan="2"></td>
                    </tr>
                </tbody>
            </table>
        </section>
        `;
    }
    
    /**
     * 지방소득세 계산 섹션
     */
    generateLocalTaxCalculationSection() {
        const { tax } = this.taxReturnData;
        
        return `
        <section class="local-tax-calculation">
            <h2>3. 지방소득세 세액 계산</h2>
            <table class="calculation-table">
                <thead>
                    <tr>
                        <th>구분</th>
                        <th>법인세액(원)</th>
                        <th>세율</th>
                        <th>지방소득세액(원)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>지방소득세</td>
                        <td class="amount">${this.formatAmount(tax.corporate_tax)}</td>
                        <td>10%</td>
                        <td class="amount">${this.formatAmount(tax.local_income_tax)}</td>
                    </tr>
                </tbody>
            </table>
        </section>
        `;
    }
    
    /**
     * 금액 포맷팅
     */
    formatAmount(amount) {
        return new Intl.NumberFormat('ko-KR').format(amount || 0);
    }
    
    /**
     * 날짜 포맷팅
     */
    formatDate(dateString) {
        if (!dateString) return '-';
        const year = dateString.substr(0, 4);
        const month = dateString.substr(4, 2);
        const day = dateString.substr(6, 2);
        return `${year}.${month}.${day}`;
    }
    
    /**
     * 납부기한 계산
     */
    getPaymentDeadline() {
        const now = new Date();
        const nextMonth = new Date(now.getFullYear(), now.getMonth() + 1, 31);
        return nextMonth.toLocaleDateString('ko-KR');
    }
    
    /**
     * CSS 스타일 반환
     */
    getTaxReturnCSS() {
        return `
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Malgun Gothic', sans-serif;
            font-size: 12px;
            line-height: 1.4;
            color: #333;
            background: white;
        }
        
        .tax-return-container {
            max-width: 210mm;
            margin: 0 auto;
            padding: 20mm;
            background: white;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 30px;
            border-bottom: 2px solid #333;
            padding-bottom: 20px;
        }
        
        .header h1 {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .report-info p {
            margin: 5px 0;
            font-size: 11px;
            color: #666;
        }
        
        .company-seal {
            text-align: center;
        }
        
        .seal-box {
            border: 1px solid #333;
            padding: 15px;
            width: 80px;
            height: 80px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        
        .seal-area {
            margin-top: 10px;
            font-size: 10px;
        }
        
        section {
            margin-bottom: 25px;
            page-break-inside: avoid;
        }
        
        section h2 {
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 10px;
            padding: 8px 0;
            border-bottom: 1px solid #ccc;
        }
        
        section h3 {
            font-size: 12px;
            font-weight: bold;
            margin: 15px 0 8px 0;
            color: #555;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 10px;
        }
        
        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
            vertical-align: middle;
        }
        
        th {
            background-color: #f5f5f5;
            font-weight: bold;
            text-align: center;
        }
        
        .label {
            background-color: #f8f8f8;
            font-weight: bold;
            width: 20%;
            text-align: center;
        }
        
        .value {
            width: 30%;
        }
        
        .amount {
            text-align: right !important;
            font-weight: bold;
        }
        
        .total-row {
            background-color: #f0f8ff;
            font-weight: bold;
        }
        
        .subtotal-row {
            background-color: #f5f5f5;
            font-weight: bold;
        }
        
        .no-data {
            text-align: center;
            color: #999;
            font-style: italic;
            padding: 20px;
        }
        
        .footer {
            margin-top: 40px;
            border-top: 1px solid #ccc;
            padding-top: 20px;
        }
        
        .signature-area {
            text-align: right;
            margin-bottom: 20px;
        }
        
        .signature-date {
            margin: 15px 0;
        }
        
        .signature-info p {
            margin: 8px 0;
        }
        
        .system-info {
            text-align: center;
            font-size: 10px;
            color: #999;
            border-top: 1px solid #eee;
            padding-top: 10px;
        }
        
        @media print {
            .tax-return-container {
                padding: 0;
                max-width: none;
            }
            
            section {
                page-break-inside: avoid;
            }
            
            .system-info {
                display: none;
            }
        }
        `;
    }
}

// 전역 함수들
window.TaxReturnGenerator = TaxReturnGenerator;

/**
 * 신고서 미리보기 생성
 */
function generateTaxReturnPreview() {
    if (!window.taxCalculator) {
        showAlert('세무계산이 실행되지 않았습니다. 먼저 세무계산을 실행해주세요.', 'warning');
        return;
    }
    
    try {
        const taxReturnData = window.taxCalculator.generateTaxReturnData();
        const generator = new TaxReturnGenerator();
        const htmlReturn = generator.setTaxReturnData(taxReturnData).generateHTMLReturn();
        
        // 새 창에서 신고서 표시
        const newWindow = window.open('', '_blank', 'width=800,height=1000,scrollbars=yes');
        newWindow.document.write(htmlReturn);
        newWindow.document.close();
        
        showAlert('신고서가 생성되었습니다.', 'success');
        
    } catch (error) {
        console.error('신고서 생성 오류:', error);
        showAlert('신고서 생성 중 오류가 발생했습니다: ' + error.message, 'danger');
    }
}

/**
 * 신고서 PDF 다운로드
 */
function downloadTaxReturnPDF() {
    if (!window.taxCalculator) {
        showAlert('세무계산이 실행되지 않았습니다. 먼저 세무계산을 실행해주세요.', 'warning');
        return;
    }
    
    try {
        const taxReturnData = window.taxCalculator.generateTaxReturnData();
        const generator = new TaxReturnGenerator();
        const htmlReturn = generator.setTaxReturnData(taxReturnData).generateHTMLReturn();
        
        // HTML을 Blob으로 변환
        const blob = new Blob([htmlReturn], { type: 'text/html;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        
        // 다운로드 링크 생성
        const link = document.createElement('a');
        link.href = url;
        link.download = `법인세신고서_${taxReturnData.declaration.company_name}_${taxReturnData.declaration.business_year}.html`;
        link.click();
        
        URL.revokeObjectURL(url);
        
        showAlert('신고서 HTML 파일이 다운로드되었습니다. 브라우저에서 열어 PDF로 인쇄하실 수 있습니다.', 'success');
        
    } catch (error) {
        console.error('신고서 다운로드 오류:', error);
        showAlert('신고서 다운로드 중 오류가 발생했습니다: ' + error.message, 'danger');
    }
}

// 전역 함수로 노출
window.generateTaxReturnPreview = generateTaxReturnPreview;
window.downloadTaxReturnPDF = downloadTaxReturnPDF;